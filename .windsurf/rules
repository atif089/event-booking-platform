# General Code Style & Formatting
- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
- Avoid using any.
- Create necessary types.
- Use JSDoc to document public classes and methods.
- Don't leave blank lines within a function.
- One export per file.

# Naming Conventions
- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
- Avoid magic numbers and define constants.

# Functions & Logic
- Keep functions short and single-purpose (<20 lines).
- Avoid deeply nested blocks by:
- Using early returns.
- Extracting logic into utility functions.
- Use higher-order functions (map, filter, reduce) to simplify logic.
- Use arrow functions for simple cases (<3 instructions), named functions otherwise.
- Use default parameter values instead of null/undefined checks.
- Use RO-RO (Receive Object, Return Object) for passing and returning multiple parameters.

# Data Handling
- Avoid excessive use of primitive types; encapsulate data in composite types.
- Avoid placing validation inside functionsâ€”use classes with internal validation instead.
- Prefer immutability for data:
- Use readonly for immutable properties.
- Use as const for literals that never change.
- Never make changes to prisma models

# Application Requirements Context

Scenario: "Build the MVP data layer and basic UI for a local events booking platform."
Requirements:

Models & API:
Event model: title, description, datetime, location, capacity, price_per_person
Basic CRUD operations for events
Simple search endpoint (by title, date range, bonus points for more complex search like Vector Search)
Seed with 8-10 diverse events (cooking class, yoga, tour, workshop, etc.)

Basic UI:
Event listing page with search form
Event detail page showing all event info
Event creation form (simple admin interface)
Clean, functional styling (no need for fancy design)

Technical Specs:
Use your preferred stack
Focus on clean code architecture
Include documentation
Test core flows
Include setup/run instructions
Should start locally in under 5 minutes
Must connect to a database (local is fine)
Should include API routes

Explicitly Skip:
User authentication
Booking functionality
Payment processingImage uploads
Complex validation

We Value:
Easy to read code
Speed and Simplicity > Complex and Complete
Well thought out solutions
Thinking about scalability and the future
